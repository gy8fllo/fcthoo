#在‘http{}’里面添加（或修改）如下两个‘server’配置：
http {
#.........<省略>........

    server {
        listen 80; #IPv4,http默认监听端口。
        listen [::]:80; #IPv6,http默认监听端口。无IPv6,此项可以删除。
        return 301 https://$host$request_uri; #http自动跳转https,让网站看起来更真实。
    }

    server {
        listen 443 ssl; #IPv4,https默认监听端口。
        listen [::]:443 ssl; #IPv6,https默认监听端口。无IPv6,此项可以删除。
        server_name xx.yy; #更改为自己的域名

        ssl_certificate /home/tls/xx.yy/xx.yy.crt; #换成自己的证书，绝对路径。
        ssl_certificate_key /home/tls/xx.yy/xx.yy.key; #换成自己的密钥，绝对路径。

        ssl_protocols TLSv1.2 TLSv1.3; #TLSv1.3需使用OpenSSl版本大于1.1.1编译才支持
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers on;

        location = /8ALdGZ9k { #与socks+ws或shadowsocks+ws应用中path对应
            proxy_redirect off;
            proxy_pass http://127.0.0.1:2008; #转发给本机socks+ws或shadowsocks+ws监听端口
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS
        location / {
            if ($host ~* "\d+\.\d+\.\d+\.\d+") { #禁止以ip方式访问网站
                return 400;
            }
            root /var/www/html; #更改为自己存放的web文件路径
            index index.html index.htm;
        }
    }
}

介绍：

利用 caddy 或 nginx 支持 WebSocket（WS）代理，实现 socks+ws+tls 与 shadowsocks+ws+tls 两种反向代理应用，TLS 由 caddy 或 nginx 提供及处理。

原理：

默认流程：WEB client <-------- HTTPS（HTTP/1.1+TLS） -------> caddy/nginx（WEB server）  
匹配流程：Xray/v2ray client <--------- WebSocket+TLS ---------> caddy/nginx <-- WebSocket --> Xray/v2ray server

注意：

1、SS 为 shadowsocks 简写。

2、若采用 caddy 反向代理，本示例 caddy 的 Caddyfile 格式配置与 json 格式配置二选一即可（效果一样）。支持自动 HTTPS，即自动申请与更新证书与私钥，自动 HTTP 重定向到 HTTPS。

3、nginx 支持 TLSv1.3，需要 nginx 包含版本大于 1.1.1 的 OpenSSl 库和 http_ssl_module 模块。

4、若采用 nginx 反向代理，不要使用 ACME 客户端在当前服务器上以 HTTP 验证或 TLS-ALPN 验证方式申请与更新证书及密钥，因 HTTP 验证或 TLS-ALPN 验证方式申请与更新证书及密钥需监听 80 端口或 443 端口，从而与当前应用端口冲突。

{
  "log": {
    "loglevel": "warning",
    "error": "/var/log/v2ray/error.log", //若使用xray，此处目录名称v2ray改成xray。
    "access": "/var/log/v2ray/access.log" //若使用xray，此处目录名称v2ray改成xray。
  },
  "inbounds": [
    {
      "listen": "127.0.0.1", //只监听本机，避免本机外的机器探测到下面端口。
      "port": 2008, //socks+ws监听端口
      "protocol": "socks",
      "settings": {
        "auth": "noauth",
        "udp": true,
        "ip": "127.0.0.1"
      },
      "streamSettings": {
        "network": "ws",
        "security": "none",
        "wsSettings": {
          "path": "/8ALdGZ9k" //修改成自己的path
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    }
  ],
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      {
        "type": "field",
        "protocol": [
          "bittorrent"
        ],
        "outboundTag": "blocked"
      }
    ]
  },
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    },
    {
      "tag": "blocked",
      "protocol": "blackhole",
      "settings": {}
    }
  ]
}

{
  "log": {
    "loglevel": "warning",
    "error": "/var/log/v2ray/error.log", //若使用xray，此处目录名称v2ray改成xray。
    "access": "/var/log/v2ray/access.log" //若使用xray，此处目录名称v2ray改成xray。
  },
  "inbounds": [
    {
      "listen": "127.0.0.1", //只监听本机，避免本机外的机器探测到下面端口。
      "port": 2008, //shadowsocks+ws监听端口
      "protocol": "shadowsocks",
      "settings": {
        "email": "2008@gmail.com",
        "method": "aes-128-gcm",
        "password": "diy2008", //修改成自己的密码
        "ota": false,
        "network": "tcp,udp"
      },
      "streamSettings": {
        "network": "ws",
        "security": "none",
        "wsSettings": {
          "path": "/8ALdGZ9k" //修改成自己的path
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    }
  ],
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      {
        "type": "field",
        "protocol": [
          "bittorrent"
        ],
        "outboundTag": "blocked"
      }
    ]
  },
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    },
    {
      "tag": "blocked",
      "protocol": "blackhole",
      "settings": {}
    }
  ]
}

//Xray从v1.2.3版开始支持Shadowsocks AEAD单端口多用户，配置方法与vmess、vless、trojan协议配置单端口多用户类似。AEAD就是aes-256-gcm、aes-128-gcm、chacha20-ietf-poly1305加密算法。
//原配置：
//.........<省略>........
      "settings": {
        "email": "2008@gmail.com",
        "method": "aes-128-gcm",
        "password": "diy2008", //修改成自己的密码
        "ota": false,
        "network": "tcp,udp"
      },
//.........<省略>........

//以上配置修改为如下：
//单用户
//.........<省略>........
      "settings": {
        "clients": [
          {
            "method": "aes-128-gcm",
            "password": "diy2008", //更改为自己的密码
            "email": "2008@gmail.com"
          }
        ],
        "network": "tcp,udp"
      },
//.........<省略>........

//多用户
//.........<省略>........
      "settings": {
        "clients": [
          {
            "method": "aes-256-gcm",
            "password": "diy2018", //更改为自己的密码
            "email": "2018@gmail.com"
          },
          {
            "method": "aes-128-gcm",
            "password": "diy2028", //更改为自己的密码
            "email": "2028@gmail.com"
          },
          {
            "method": "chacha20-ietf-poly1305",
            "password": "diy2038", //更改为自己的密码
            "email": "2038@gmail.com"
          }
        ],
        "network": "tcp,udp"
      },
//.........<省略>........

{
  "admin": {
    "disabled": true
  },
  "logging": {
    "logs": {
      "default": {
        "level": "ERROR",
        "writer": {
          "output": "file",
          "filename": "/var/log/caddy/access.log"
        }
      }
    }
  },
  "apps": {
    "http": {
      "servers": {
        "https": {
          "listen": [":443"],
          "routes": [{
            "match": [{
              "path": ["/8ALdGZ9k"], //与socks+ws或shadowsocks+ws应用中path对应
              "header": {
                "Connection": ["*Upgrade*"],
                "Upgrade": ["websocket"]
              }
            }],
            "handle": [{
              "handler": "reverse_proxy",
              "upstreams": [{
                "dial": "127.0.0.1:2008" //转发给本机socks+ws或shadowsocks+ws监听端口
              }]
            }]
          },
          {
            "match": [{
              "host": ["xx.yy"] //限定域名访问（禁止以ip方式访问网站），更改为自己的域名。
            }],
            "handle": [{
              "handler": "headers",
              "response": {
                "set": {
                  "Strict-Transport-Security": ["max-age=31536000; includeSubDomains; preload"] //启用HSTS
                }
              }
            },
            {
              "handler": "file_server",
              "root": "/var/www/html" //更改为自己存放的web文件路径
            }]
          }],
          "tls_connection_policies": [{
            "cipher_suites": ["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"],
            "alpn": ["http/1.1","h2"]
          }]
        }
      }
    },
    "tls": {
      "certificates": {
        "automate": ["xx.yy"] //自动化管理域名证书（包括获取、更新证书及加载证书）。更改为自己的域名。
      }
    }
  }
}

{
	order reverse_proxy before map
	admin off
	log { #注意：版本不小于v2.4.0才支持日志全局配置，否则各自配置。
		output file /var/log/caddy/access.log
		level ERROR
	}
}

:443, xx.yy { #xx.yy更改为自己的域名。注意：逗号与域名之间有一个空格。
	tls {
		ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
		alpn http/1.1 h2
	}

	@sws { #匹配器标签。此标签仅区分，多个不同代理需要改成不同名称，但要与下边‘reverse_proxy’中匹配器标签对应。
		path /8ALdGZ9k #与socks+ws或shadowsocks+ws应用中path对应
		header Connection *Upgrade*
		header Upgrade websocket
	}
	reverse_proxy @sws 127.0.0.1:2008 #转发给本机socks+ws或shadowsocks+ws监听端口

	@host {
		host xx.yy #限定域名访问（禁止以ip方式访问网站），更改为自己的域名。
	}
	route @host {
		header {
			Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" #启用HSTS
		}
		file_server {
			root /var/www/html #更改为自己存放的web文件路径
		}
	}
}

//使用多个域名实现CDN流量中转与正常应用共存配置
//一、多个域名申请普通证书配置
//原配置：
//.........<省略>........
            "match": [{
              "host": ["xx.yy"] //限定域名访问（禁止以ip方式访问网站），更改为自己的域名。
            }],
//.........<省略>........
      "certificates": {
        "automate": ["xx.yy"] //自动化管理域名证书（包括获取、更新证书及加载证书）。更改为自己的域名。
      }
//.........<省略>........

//以上配置修改为如下：
//.........<省略>........
            "match": [{
              "host": ["z1.xx.yy","z2.xx.yy"] //限定域名访问（禁止以ip方式访问网站），更改为自己的域名。z1.xx.yy与z2.xx.yy表示两个不同域名（推荐采用根域名相同的两个二级域名即可）。
            }],
//.........<省略>........
      "certificates": {
        "automate": ["z1.xx.yy","z2.xx.yy"] //自动化管理域名证书（包括获取、更新证书及加载证书）。更改为自己的域名。。z1.xx.yy与z2.xx.yy表示两个不同域名（推荐采用根域名相同的两个二级域名即可）。
      }
//.........<省略>........


//二、申请通配符证书配置
//详见“caddy(other configuration) （caddy的特殊应用配置方法。）”。

#使用多个域名实现CDN流量中转与正常应用共存配置
#一、多个域名申请普通证书配置
#原配置：
#.........<省略>........
:443, xx.yy { #xx.yy更改为自己的域名。注意：逗号与域名之间有一个空格。
#.........<省略>........
	@host {
		host xx.yy #限定域名访问（禁止以ip方式访问网站），更改为自己的域名。
	}
#.........<省略>........

#以上配置修改为如下：
#.........<省略>........
:443, z1.xx.yy, z2.xx.yy { #z1.xx.yy与z2.xx.yy更改为自己的域名。z1.xx.yy与z2.xx.yy表示两个不同域名（推荐采用根域名相同的两个二级域名即可）。
#.........<省略>........
	@host {
		host z1.xx.yy z2.xx.yy #限定域名访问（禁止以ip方式访问网站），更改为自己的域名。z1.xx.yy与z2.xx.yy表示两个不同域名（推荐采用根域名相同的两个二级域名即可）。
	}
#.........<省略>........


#二、申请通配符证书配置
#详见“caddy(other configuration) （caddy的特殊应用配置方法。）”。

#使用多个域名实现CDN流量中转与正常应用共存配置
#一、多个域名使用同一个通配符证书或SAN证书
#原配置：
#.........<省略>........
    server {
        listen 443 ssl; #IPv4,https默认监听端口。
        listen [::]:443 ssl; #IPv6,https默认监听端口。无IPv6,此项可以删除。
        server_name xx.yy; #更改为自己的域名

        ssl_certificate /home/tls/xx.yy/xx.yy.crt; #换成自己的证书，绝对路径。
        ssl_certificate_key /home/tls/xx.yy/xx.yy.key; #换成自己的密钥，绝对路径。
#.........<省略>........
    }
}

#以上配置修改为如下：
#.........<省略>........
    server {
        listen 443 ssl; #IPv4,https默认监听端口。
        listen [::]:443 ssl; #IPv6,https默认监听端口。无IPv6,此项可以删除。
        server_name *.xx.yy; #更改为自己的通配符域名

        ssl_certificate /home/tls/wildcard_.xx.yy/wildcard_.xx.yy.crt; #换成自己的通配符证书或SAN证书，绝对路径。
        ssl_certificate_key /home/tls/wildcard_.xx.yy/wildcard_.xx.yy.key; #换成自己的通配符密钥或SAN密钥，绝对路径。
#.........<省略>........
    }
}
#注意：
#1、如多个域名使用同一个SAN证书，配置与上使用通配符证书配置类似，只是上述的通配符域名调整为多个域名。


#二、多个域名使用各自普通证书
#原配置：
#.........<省略>........
    server {
        listen 443 ssl; #IPv4,https默认监听端口。
        listen [::]:443 ssl; #IPv6,https默认监听端口。无IPv6,此项可以删除。
        server_name xx.yy; #更改为自己的域名

        ssl_certificate /home/tls/xx.yy/xx.yy.crt; #换成自己的证书，绝对路径。
        ssl_certificate_key /home/tls/xx.yy/xx.yy.key; #换成自己的密钥，绝对路径。
#.........<省略>........
    }
}

#以上配置修改为如下：
#.........<省略>........
    server {
        listen 443 ssl; #IPv4,https默认监听端口。
        listen [::]:443 ssl; #IPv6,https默认监听端口。无IPv6,此项可以删除。
        server_name z1.xx.yy; #更改为自己的域名

        ssl_certificate /home/tls/z1.xx.yy/z1.xx.yy.crt; #换成自己的证书，绝对路径。
        ssl_certificate_key /home/tls/z1.xx.yy/z1.xx.yy.key; #换成自己的密钥，绝对路径。
#.........<省略>........
    }

    server {
        listen 443 ssl; #IPv4,https默认监听端口。
        listen [::]:443 ssl; #IPv6,https默认监听端口。无IPv6,此项可以删除。
        server_name z2.xx.yy; #更改为自己的域名

        ssl_certificate /home/tls/z2.xx.yy/z2.xx.yy.crt; #换成自己的证书，绝对路径。
        ssl_certificate_key /home/tls/z2.xx.yy/z2.xx.yy.key; #换成自己的密钥，绝对路径。
#.........<省略>........
    }
}
#注意：
#1、此示例必须 nginx 带 stream_ssl_preread_module 模块，即 SNI 分流模块。
#2、z1.xx.yy与z2.xx.yy表示两个不同域名（推荐采用根域名相同的两个二级域名即可）。
